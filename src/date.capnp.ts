/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

/* tslint:disable */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = "dbb9ad1f14bf0b36";
export class Date extends __S {
    static readonly _capnp = { displayName: "Date", id: "ef29c66fa74a8c93", size: new __O(8, 0) };
    getYear(): number { return __S.getInt16(0, this); }
    setYear(value: number): void { __S.setInt16(0, value, this); }
    getMonth(): number { return __S.getUint8(2, this); }
    setMonth(value: number): void { __S.setUint8(2, value, this); }
    getDay(): number { return __S.getUint8(3, this); }
    setDay(value: number): void { __S.setUint8(3, value, this); }
    toString(): string { return "Date_" + super.toString(); }
}
export class DateArr extends __S {
    static readonly _capnp = { displayName: "DateArr", id: "f74dc6379e812e3f", size: new __O(0, 1) };
    static _Value: capnp.ListCtor<Date>;
    adoptValue(value: capnp.Orphan<capnp.List<Date>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownValue(): capnp.Orphan<capnp.List<Date>> { return __S.disown(this.getValue()); }
    getValue(): capnp.List<Date> { return __S.getList(0, DateArr._Value, this); }
    hasValue(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initValue(length: number): capnp.List<Date> { return __S.initList(0, DateArr._Value, length, this); }
    setValue(value: capnp.List<Date>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "DateArr_" + super.toString(); }
}
DateArr._Value = capnp.CompositeList(Date);
